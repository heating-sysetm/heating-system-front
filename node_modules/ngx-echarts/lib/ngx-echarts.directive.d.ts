import { AfterViewInit, DoCheck, ElementRef, EventEmitter, InjectionToken, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
export interface NgxEchartsConfig {
    echarts: any | (() => Promise<any>);
}
export declare const NGX_ECHARTS_CONFIG: InjectionToken<NgxEchartsConfig>;
export declare class NgxEchartsDirective implements OnChanges, OnDestroy, OnInit, DoCheck, AfterViewInit {
    private el;
    private ngZone;
    options: any;
    theme: string;
    loading: boolean;
    initOpts: {
        devicePixelRatio?: number;
        renderer?: string;
        width?: number | string;
        height?: number | string;
    };
    merge: any;
    autoResize: boolean;
    loadingType: string;
    loadingOpts: object;
    chartInit: EventEmitter<any>;
    optionsError: EventEmitter<Error>;
    chartClick: EventEmitter<unknown>;
    chartDblClick: EventEmitter<unknown>;
    chartMouseDown: EventEmitter<unknown>;
    chartMouseMove: EventEmitter<unknown>;
    chartMouseUp: EventEmitter<unknown>;
    chartMouseOver: EventEmitter<unknown>;
    chartMouseOut: EventEmitter<unknown>;
    chartGlobalOut: EventEmitter<unknown>;
    chartContextMenu: EventEmitter<unknown>;
    chartLegendSelectChanged: EventEmitter<unknown>;
    chartLegendSelected: EventEmitter<unknown>;
    chartLegendUnselected: EventEmitter<unknown>;
    chartLegendScroll: EventEmitter<unknown>;
    chartDataZoom: EventEmitter<unknown>;
    chartDataRangeSelected: EventEmitter<unknown>;
    chartTimelineChanged: EventEmitter<unknown>;
    chartTimelinePlayChanged: EventEmitter<unknown>;
    chartRestore: EventEmitter<unknown>;
    chartDataViewChanged: EventEmitter<unknown>;
    chartMagicTypeChanged: EventEmitter<unknown>;
    chartPieSelectChanged: EventEmitter<unknown>;
    chartPieSelected: EventEmitter<unknown>;
    chartPieUnselected: EventEmitter<unknown>;
    chartMapSelectChanged: EventEmitter<unknown>;
    chartMapSelected: EventEmitter<unknown>;
    chartMapUnselected: EventEmitter<unknown>;
    chartAxisAreaSelected: EventEmitter<unknown>;
    chartFocusNodeAdjacency: EventEmitter<unknown>;
    chartUnfocusNodeAdjacency: EventEmitter<unknown>;
    chartBrush: EventEmitter<unknown>;
    chartBrushEnd: EventEmitter<unknown>;
    chartBrushSelected: EventEmitter<unknown>;
    chartRendered: EventEmitter<unknown>;
    chartFinished: EventEmitter<unknown>;
    private chart;
    private echarts;
    private currentOffsetWidth;
    private currentOffsetHeight;
    private currentWindowWidth;
    private resizeSub;
    constructor(config: NgxEchartsConfig, el: ElementRef, ngZone: NgZone);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngDoCheck(): void;
    ngAfterViewInit(): void;
    private dispose;
    private resize;
    private toggleLoading;
    private setOption;
    private refreshChart;
    private createChart;
    private initChart;
    private onOptionsChange;
    private createLazyEvent;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxEchartsDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NgxEchartsDirective, "echarts, [echarts]", ["echarts"], { "autoResize": "autoResize"; "loadingType": "loadingType"; "options": "options"; "theme": "theme"; "loading": "loading"; "initOpts": "initOpts"; "merge": "merge"; "loadingOpts": "loadingOpts"; }, { "chartInit": "chartInit"; "optionsError": "optionsError"; "chartClick": "chartClick"; "chartDblClick": "chartDblClick"; "chartMouseDown": "chartMouseDown"; "chartMouseMove": "chartMouseMove"; "chartMouseUp": "chartMouseUp"; "chartMouseOver": "chartMouseOver"; "chartMouseOut": "chartMouseOut"; "chartGlobalOut": "chartGlobalOut"; "chartContextMenu": "chartContextMenu"; "chartLegendSelectChanged": "chartLegendSelectChanged"; "chartLegendSelected": "chartLegendSelected"; "chartLegendUnselected": "chartLegendUnselected"; "chartLegendScroll": "chartLegendScroll"; "chartDataZoom": "chartDataZoom"; "chartDataRangeSelected": "chartDataRangeSelected"; "chartTimelineChanged": "chartTimelineChanged"; "chartTimelinePlayChanged": "chartTimelinePlayChanged"; "chartRestore": "chartRestore"; "chartDataViewChanged": "chartDataViewChanged"; "chartMagicTypeChanged": "chartMagicTypeChanged"; "chartPieSelectChanged": "chartPieSelectChanged"; "chartPieSelected": "chartPieSelected"; "chartPieUnselected": "chartPieUnselected"; "chartMapSelectChanged": "chartMapSelectChanged"; "chartMapSelected": "chartMapSelected"; "chartMapUnselected": "chartMapUnselected"; "chartAxisAreaSelected": "chartAxisAreaSelected"; "chartFocusNodeAdjacency": "chartFocusNodeAdjacency"; "chartUnfocusNodeAdjacency": "chartUnfocusNodeAdjacency"; "chartBrush": "chartBrush"; "chartBrushEnd": "chartBrushEnd"; "chartBrushSelected": "chartBrushSelected"; "chartRendered": "chartRendered"; "chartFinished": "chartFinished"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWVjaGFydHMuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbIm5neC1lY2hhcnRzLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgRG9DaGVjaywgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbmplY3Rpb25Ub2tlbiwgTmdab25lLCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBTaW1wbGVDaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5leHBvcnQgaW50ZXJmYWNlIE5neEVjaGFydHNDb25maWcge1xuICAgIGVjaGFydHM6IGFueSB8ICgoKSA9PiBQcm9taXNlPGFueT4pO1xufVxuZXhwb3J0IGRlY2xhcmUgY29uc3QgTkdYX0VDSEFSVFNfQ09ORklHOiBJbmplY3Rpb25Ub2tlbjxOZ3hFY2hhcnRzQ29uZmlnPjtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5neEVjaGFydHNEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBEb0NoZWNrLCBBZnRlclZpZXdJbml0IHtcbiAgICBwcml2YXRlIGVsO1xuICAgIHByaXZhdGUgbmdab25lO1xuICAgIG9wdGlvbnM6IGFueTtcbiAgICB0aGVtZTogc3RyaW5nO1xuICAgIGxvYWRpbmc6IGJvb2xlYW47XG4gICAgaW5pdE9wdHM6IHtcbiAgICAgICAgZGV2aWNlUGl4ZWxSYXRpbz86IG51bWJlcjtcbiAgICAgICAgcmVuZGVyZXI/OiBzdHJpbmc7XG4gICAgICAgIHdpZHRoPzogbnVtYmVyIHwgc3RyaW5nO1xuICAgICAgICBoZWlnaHQ/OiBudW1iZXIgfCBzdHJpbmc7XG4gICAgfTtcbiAgICBtZXJnZTogYW55O1xuICAgIGF1dG9SZXNpemU6IGJvb2xlYW47XG4gICAgbG9hZGluZ1R5cGU6IHN0cmluZztcbiAgICBsb2FkaW5nT3B0czogb2JqZWN0O1xuICAgIGNoYXJ0SW5pdDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb3B0aW9uc0Vycm9yOiBFdmVudEVtaXR0ZXI8RXJyb3I+O1xuICAgIGNoYXJ0Q2xpY2s6IEV2ZW50RW1pdHRlcjx1bmtub3duPjtcbiAgICBjaGFydERibENsaWNrOiBFdmVudEVtaXR0ZXI8dW5rbm93bj47XG4gICAgY2hhcnRNb3VzZURvd246IEV2ZW50RW1pdHRlcjx1bmtub3duPjtcbiAgICBjaGFydE1vdXNlTW92ZTogRXZlbnRFbWl0dGVyPHVua25vd24+O1xuICAgIGNoYXJ0TW91c2VVcDogRXZlbnRFbWl0dGVyPHVua25vd24+O1xuICAgIGNoYXJ0TW91c2VPdmVyOiBFdmVudEVtaXR0ZXI8dW5rbm93bj47XG4gICAgY2hhcnRNb3VzZU91dDogRXZlbnRFbWl0dGVyPHVua25vd24+O1xuICAgIGNoYXJ0R2xvYmFsT3V0OiBFdmVudEVtaXR0ZXI8dW5rbm93bj47XG4gICAgY2hhcnRDb250ZXh0TWVudTogRXZlbnRFbWl0dGVyPHVua25vd24+O1xuICAgIGNoYXJ0TGVnZW5kU2VsZWN0Q2hhbmdlZDogRXZlbnRFbWl0dGVyPHVua25vd24+O1xuICAgIGNoYXJ0TGVnZW5kU2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjx1bmtub3duPjtcbiAgICBjaGFydExlZ2VuZFVuc2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjx1bmtub3duPjtcbiAgICBjaGFydExlZ2VuZFNjcm9sbDogRXZlbnRFbWl0dGVyPHVua25vd24+O1xuICAgIGNoYXJ0RGF0YVpvb206IEV2ZW50RW1pdHRlcjx1bmtub3duPjtcbiAgICBjaGFydERhdGFSYW5nZVNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8dW5rbm93bj47XG4gICAgY2hhcnRUaW1lbGluZUNoYW5nZWQ6IEV2ZW50RW1pdHRlcjx1bmtub3duPjtcbiAgICBjaGFydFRpbWVsaW5lUGxheUNoYW5nZWQ6IEV2ZW50RW1pdHRlcjx1bmtub3duPjtcbiAgICBjaGFydFJlc3RvcmU6IEV2ZW50RW1pdHRlcjx1bmtub3duPjtcbiAgICBjaGFydERhdGFWaWV3Q2hhbmdlZDogRXZlbnRFbWl0dGVyPHVua25vd24+O1xuICAgIGNoYXJ0TWFnaWNUeXBlQ2hhbmdlZDogRXZlbnRFbWl0dGVyPHVua25vd24+O1xuICAgIGNoYXJ0UGllU2VsZWN0Q2hhbmdlZDogRXZlbnRFbWl0dGVyPHVua25vd24+O1xuICAgIGNoYXJ0UGllU2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjx1bmtub3duPjtcbiAgICBjaGFydFBpZVVuc2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjx1bmtub3duPjtcbiAgICBjaGFydE1hcFNlbGVjdENoYW5nZWQ6IEV2ZW50RW1pdHRlcjx1bmtub3duPjtcbiAgICBjaGFydE1hcFNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8dW5rbm93bj47XG4gICAgY2hhcnRNYXBVbnNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8dW5rbm93bj47XG4gICAgY2hhcnRBeGlzQXJlYVNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8dW5rbm93bj47XG4gICAgY2hhcnRGb2N1c05vZGVBZGphY2VuY3k6IEV2ZW50RW1pdHRlcjx1bmtub3duPjtcbiAgICBjaGFydFVuZm9jdXNOb2RlQWRqYWNlbmN5OiBFdmVudEVtaXR0ZXI8dW5rbm93bj47XG4gICAgY2hhcnRCcnVzaDogRXZlbnRFbWl0dGVyPHVua25vd24+O1xuICAgIGNoYXJ0QnJ1c2hFbmQ6IEV2ZW50RW1pdHRlcjx1bmtub3duPjtcbiAgICBjaGFydEJydXNoU2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjx1bmtub3duPjtcbiAgICBjaGFydFJlbmRlcmVkOiBFdmVudEVtaXR0ZXI8dW5rbm93bj47XG4gICAgY2hhcnRGaW5pc2hlZDogRXZlbnRFbWl0dGVyPHVua25vd24+O1xuICAgIHByaXZhdGUgY2hhcnQ7XG4gICAgcHJpdmF0ZSBlY2hhcnRzO1xuICAgIHByaXZhdGUgY3VycmVudE9mZnNldFdpZHRoO1xuICAgIHByaXZhdGUgY3VycmVudE9mZnNldEhlaWdodDtcbiAgICBwcml2YXRlIGN1cnJlbnRXaW5kb3dXaWR0aDtcbiAgICBwcml2YXRlIHJlc2l6ZVN1YjtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWc6IE5neEVjaGFydHNDb25maWcsIGVsOiBFbGVtZW50UmVmLCBuZ1pvbmU6IE5nWm9uZSk7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIG5nRG9DaGVjaygpOiB2b2lkO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIHByaXZhdGUgZGlzcG9zZTtcbiAgICBwcml2YXRlIHJlc2l6ZTtcbiAgICBwcml2YXRlIHRvZ2dsZUxvYWRpbmc7XG4gICAgcHJpdmF0ZSBzZXRPcHRpb247XG4gICAgcHJpdmF0ZSByZWZyZXNoQ2hhcnQ7XG4gICAgcHJpdmF0ZSBjcmVhdGVDaGFydDtcbiAgICBwcml2YXRlIGluaXRDaGFydDtcbiAgICBwcml2YXRlIG9uT3B0aW9uc0NoYW5nZTtcbiAgICBwcml2YXRlIGNyZWF0ZUxhenlFdmVudDtcbn1cbiJdfQ==